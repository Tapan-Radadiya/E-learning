// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: gRPC/protoFile/trigger_user_event.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserXpEventTriggerService_TriggerUserXPEvent_FullMethodName = "/TriggerXPEvent.UserXpEventTriggerService/TriggerUserXPEvent"
	UserXpEventTriggerService_GetUserXp_FullMethodName          = "/TriggerXPEvent.UserXpEventTriggerService/GetUserXp"
	UserXpEventTriggerService_GetEventXpPoints_FullMethodName   = "/TriggerXPEvent.UserXpEventTriggerService/GetEventXpPoints"
)

// UserXpEventTriggerServiceClient is the client API for UserXpEventTriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserXpEventTriggerServiceClient interface {
	TriggerUserXPEvent(ctx context.Context, in *XpEventRequest, opts ...grpc.CallOption) (*XpEventResponse, error)
	GetUserXp(ctx context.Context, in *FetchXpDataRequest, opts ...grpc.CallOption) (*FetchXpDataResponse, error)
	GetEventXpPoints(ctx context.Context, in *FetchEventXpPointsRequest, opts ...grpc.CallOption) (*FetchEventXpPointsResponse, error)
}

type userXpEventTriggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserXpEventTriggerServiceClient(cc grpc.ClientConnInterface) UserXpEventTriggerServiceClient {
	return &userXpEventTriggerServiceClient{cc}
}

func (c *userXpEventTriggerServiceClient) TriggerUserXPEvent(ctx context.Context, in *XpEventRequest, opts ...grpc.CallOption) (*XpEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XpEventResponse)
	err := c.cc.Invoke(ctx, UserXpEventTriggerService_TriggerUserXPEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userXpEventTriggerServiceClient) GetUserXp(ctx context.Context, in *FetchXpDataRequest, opts ...grpc.CallOption) (*FetchXpDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchXpDataResponse)
	err := c.cc.Invoke(ctx, UserXpEventTriggerService_GetUserXp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userXpEventTriggerServiceClient) GetEventXpPoints(ctx context.Context, in *FetchEventXpPointsRequest, opts ...grpc.CallOption) (*FetchEventXpPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchEventXpPointsResponse)
	err := c.cc.Invoke(ctx, UserXpEventTriggerService_GetEventXpPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserXpEventTriggerServiceServer is the server API for UserXpEventTriggerService service.
// All implementations must embed UnimplementedUserXpEventTriggerServiceServer
// for forward compatibility.
type UserXpEventTriggerServiceServer interface {
	TriggerUserXPEvent(context.Context, *XpEventRequest) (*XpEventResponse, error)
	GetUserXp(context.Context, *FetchXpDataRequest) (*FetchXpDataResponse, error)
	GetEventXpPoints(context.Context, *FetchEventXpPointsRequest) (*FetchEventXpPointsResponse, error)
	mustEmbedUnimplementedUserXpEventTriggerServiceServer()
}

// UnimplementedUserXpEventTriggerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserXpEventTriggerServiceServer struct{}

func (UnimplementedUserXpEventTriggerServiceServer) TriggerUserXPEvent(context.Context, *XpEventRequest) (*XpEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserXPEvent not implemented")
}
func (UnimplementedUserXpEventTriggerServiceServer) GetUserXp(context.Context, *FetchXpDataRequest) (*FetchXpDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserXp not implemented")
}
func (UnimplementedUserXpEventTriggerServiceServer) GetEventXpPoints(context.Context, *FetchEventXpPointsRequest) (*FetchEventXpPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventXpPoints not implemented")
}
func (UnimplementedUserXpEventTriggerServiceServer) mustEmbedUnimplementedUserXpEventTriggerServiceServer() {
}
func (UnimplementedUserXpEventTriggerServiceServer) testEmbeddedByValue() {}

// UnsafeUserXpEventTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserXpEventTriggerServiceServer will
// result in compilation errors.
type UnsafeUserXpEventTriggerServiceServer interface {
	mustEmbedUnimplementedUserXpEventTriggerServiceServer()
}

func RegisterUserXpEventTriggerServiceServer(s grpc.ServiceRegistrar, srv UserXpEventTriggerServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserXpEventTriggerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserXpEventTriggerService_ServiceDesc, srv)
}

func _UserXpEventTriggerService_TriggerUserXPEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XpEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXpEventTriggerServiceServer).TriggerUserXPEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXpEventTriggerService_TriggerUserXPEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXpEventTriggerServiceServer).TriggerUserXPEvent(ctx, req.(*XpEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserXpEventTriggerService_GetUserXp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchXpDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXpEventTriggerServiceServer).GetUserXp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXpEventTriggerService_GetUserXp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXpEventTriggerServiceServer).GetUserXp(ctx, req.(*FetchXpDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserXpEventTriggerService_GetEventXpPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEventXpPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXpEventTriggerServiceServer).GetEventXpPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXpEventTriggerService_GetEventXpPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXpEventTriggerServiceServer).GetEventXpPoints(ctx, req.(*FetchEventXpPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserXpEventTriggerService_ServiceDesc is the grpc.ServiceDesc for UserXpEventTriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserXpEventTriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TriggerXPEvent.UserXpEventTriggerService",
	HandlerType: (*UserXpEventTriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerUserXPEvent",
			Handler:    _UserXpEventTriggerService_TriggerUserXPEvent_Handler,
		},
		{
			MethodName: "GetUserXp",
			Handler:    _UserXpEventTriggerService_GetUserXp_Handler,
		},
		{
			MethodName: "GetEventXpPoints",
			Handler:    _UserXpEventTriggerService_GetEventXpPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/protoFile/trigger_user_event.proto",
}
